<UserControl x:Class="Rubberduck.UI.CodePane.RubberduckCodePane"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:local="clr-namespace:Rubberduck.UI.CodePane"
             xmlns:controls="clr-namespace:Rubberduck.UI.Controls"
             xmlns:abstract="clr-namespace:Rubberduck.Parsing.Inspections.Abstract;assembly=Rubberduck.Parsing"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600" d:DataContext="{d:DesignInstance local:CodePaneViewModel}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>

        <!-- top bar /dropdowns -->
        <Grid Grid.ColumnSpan="2">
            <Grid.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
            </Grid.Background>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0" Command="{Binding RefreshCommand}">
                <Image Height="16" Width="16" Source="../../Resources/arrow-circle-double.png">
                    <Image.Style>
                        <Style TargetType="Image">
                            <Style.Triggers>
                                <Trigger Property="IsEnabled"  Value="False">
                                    <Setter Property="Opacity" Value="0.3" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <Button.ToolTip>
                    <TextBlock Text="{Resx ResxName=Rubberduck.UI.RubberduckUI, Key=Refresh}" />
                </Button.ToolTip>
            </Button>
            <!-- todo: setup itemtemplate to show icons and member names -->
            <ComboBox Grid.Column="1" x:Name="MemberProvidersBox" />
            <ComboBox Grid.Column="3" x:Name="MembersBox" />
        </Grid>

        <!-- editor -->
        <controls:BindableTextEditor x:Name="Editor"
            Grid.Column="0" Grid.Row="1"
            FontFamily="Courier New "
            ShowLineNumbers="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ShowLineNumbers}"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Auto"
            IsReadOnly="False"
            Padding="2"
            Text="{Binding Content,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
        </controls:BindableTextEditor>

        <!-- inspection results sidebar -->
        <Border Grid.Column="1" Grid.Row="1">
            <Border.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
            </Border.Background>
            <!-- todo: figure out some ItemControl to bind inspection results to -->
            <ItemsControl ItemsSource="{Binding InspectionResults}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="abstract:IInspectionResult">
                        <!-- todo: implement an enum-to-solidbrush converter for IInspectionResult.Inspection.Severity -->
                        <!-- todo: y-position items based on gridrow height and IInspectionResult.Selection.StartLine -->
                        <Rectangle Fill="{Binding Severity}" Height="3" Width="{Binding Path=Width, RelativeSource={RelativeSource AncestorType=Border}}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Border>

        <!-- bottom /status bar -->
        <StatusBar Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0">
                <ToggleButton IsChecked="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ShowLineNumbers}">
                    <Image Height="16" Source="../../Resources/document-number.png">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled"  Value="False">
                                        <Setter Property="Opacity" Value="0.3" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <ToggleButton.ToolTip>
                        <TextBlock Text="{Resx ResxName=Rubberduck.UI.RubberduckUI, Key=ToggleEditorLineNumbers}" />
                    </ToggleButton.ToolTip>
                </ToggleButton>
            </StatusBarItem>
            <StatusBarItem Grid.Column="2">
                <Label Padding="0" Content="{Binding LineCountText}" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="1">
                <Label Padding="0" Content="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=CurrentSelection}" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="3">
                <Label Padding="0" Content="{Binding StatusBarText}" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="4">
                <Label Padding="0" Content="{Binding InspectionStatus}" HorizontalAlignment="Right" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="5">
                <Button Command="{Binding ShowInspectionResultsCommand}">
                    <!-- todo: bind to InspectionStatus enum w/converter -->
                    <Image Height="16" Source="../../Resources/tick-circle.png">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled"  Value="False">
                                        <Setter Property="Opacity" Value="0.3" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </Button>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</UserControl>
